#!/bin/bash
#variáveis de controle

memory_maximum=0
is_predicted=0
vm_total_rss=0
vm_total_vsz=0
start_date=$(date +%s)
reboot_date=0
minutes=0

#checks if date A is greater than date B
function is_date_greater() {
  now=$(date +%s)
  if [ $now -ge $reboot_date ]; then
    echo 1
  else
    echo 0
  fi
}

#checks if $1 is a number
function is_number() {
  local re='^[0-9]+$'
  if ! [[ $1 =~ $re ]]; then
    return 1
  fi
  return 0
}

function print_usage() {
  echo "script usage $(basename "$0")  [-t <integer> minutes] [-m <integer> mb] [-p]" >&2
}

function reboot_machine() {
  echo "Machine will reboot now"
  ssh -p 2222 root@localhost "/sbin/shutdown -r now" > /dev/null 2>&1
}

function time_method() {
  result=$(is_date_greater)
  if [ "$result" -eq 1 ]; then
    reboot_machine
    reboot_date=$(date -d "($reboot_date) +$minutes mins" +%s)
  fi
}

function memory_method() {
  if [ $vm_total_rss -gt $memory_maximum ]; then
    echo "RSS exceeded"
    reboot_machine
  fi

  if [ $vm_total_vsz -gt $memory_maximum ]; then
      echo "VSS exceeded"
      reboot_machine
  fi
}

function predict_method() {
  echo "predict method"
}

if [[ "$1" =~ ^((-{1,2})([Hh]$|[Hh][Ee][Ll][Pp])|)$ ]]; then
  echo "Iniciando testes de rejuvenescimento | Coleta de dados"
else
  while [[ $# -gt 0 ]]; do
    opt="$1"
    shift
    current_arg="$1"
    if [[ "$current_arg" =~ ^-{1,2}.* ]]; then
      echo "WARNING: You may have left an argument blank. Double-check your command."
    fi
    case "$opt" in
    "-t" | "--time")
      minutes=$1
      reboot_date=$(date -d "($start_date) +$1 mins" +%s)
      echo "Iniciando testes de rejuvenescimento | A MV irá reinciar a cada $minutes minutos"
      shift
      ;;
    "-m" | "--memory")
      memory_maximum=$(($1 * 1024))
      echo "Iniciando testes de rejuvenescimento | A MV irá reinciar quando o RSS ou VSS extrapolarem  $1 MBS"
      shift
      ;;
    "-p" | "--predicted")
      is_predicted="$1"
      shift
      ;;
    *)
      echo "ERROR: Invalid option: \"$opt\"" >&2
      print_usage
      exit 1
      ;;
    esac
  done
fi

#if [[ "$APPLE" == "" || "$BANANA" == "" ]]; then
#    echo "ERROR: Options -a and -b require arguments." >&2
#    exit 1
#fi

function headers(){
  mkdir -p logs
  echo "cpu;mem;vmrss;vsz;threads;swap;date_time" >logs/monitoramento-VBoxSVC.txt
  echo "cpu;mem;vmrss;vsz;threads;swap;date_time" >logs/monitoramento-VBoxHeadless.txt
  echo "cpu;mem;vmrss;vsz;threads;swap;date_time" >logs/monitoramento-VBoxXPCOMIPCD.txt
  echo "usr;nice;sys;iowait;soft;date_time" >logs/monitoramento-cpu.txt
  echo "usado;date_time" >logs/monitoramento-disco.txt
  echo "used;cached;buffer;swap-free;date_time" >logs/monitoramento-mem.txt
  echo "metrica num_zumbis data hora" > monitoramento-zumbis.txt
}

headers

stap -o fragmentacao.txt memory_fragmentation/fragmentacao2b.stp  &
stap -o fragmentacao-reducao.txt memory_fragmentation/probe_fragmentacao-com-reducao.stp  &

while true; do
  :

  date_time=$(date +%d-%m-%Y-%H:%M:%S)

  source monitoramento-VBoxXPCOMIPCD.sh
  source monitoramento-VBoxHeadless.sh
  source monitoramento-VBoxSVC.sh
  
  source monitoramento-cpu.sh
  source monitoramento-disco.sh
  source monitoramento-mem.sh

  source monitoramento-zumbis.sh

  if [ "$memory_maximum" -gt 0 ]; then
    memory_method
  fi
  if [ "$is_predicted" -gt 0 ]; then
    predict_method
  fi
  if [ "$reboot_date" -gt 0 ]; then
    time_method
  fi
  vm_total_rss=0
  vm_total_vsz=0
  sleep 2
done
