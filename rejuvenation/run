#!/bin/bash

#Memory method
memory_maximum=0

vm_total_rss=0
vm_total_vsz=0

#TODO Predict method
is_predicted=0

#Time method
start_date=$(date +%s)
reboot_date=0
minutes=0

#Control variables
reboot_count=0
server_status=0
sleep_time=10
server_down_start=0

#force reboot
force=0

#vm name
vm_name="vmDebian"

#checks if date A is greater than date B
function is_date_greater() {
  now=$(date +%s)
  if [ "$now" -ge $reboot_date ]; then
    echo 1
  else
    echo 0
  fi
}

#checks if $1 is a number
function is_number() {
  local re='^[0-9]+$'
  if ! [[ $1 =~ $re ]]; then
    return 1
  fi
  return 0
}

function print_usage() {
  echo "script usage $(basename "$0")  [-t <integer> minutes] [-m <integer> mb] [-p] [-f]" >&2
}

function ensure_vm_is_on() {
    is_running=$(vboxmanage list runningvms | grep $vm_name)
    while [ -z "$is_running" ]; do
      vboxmanage startvm $vm_name --type headless
      sleep 3
      is_running=$(vboxmanage list runningvms | grep $vm_name)
    done
}

function reboot_machine() {
  reboot_count=$((reboot_count + 1))
  server_status=-1
  server_down_start=$(date +%s)
  sleep_time=1
  echo "1" > rebooting.txt

  vboxmanage storageattach vmDebian --storagectl "SATA" --device 0 --port 1 --type hdd --medium none
  if [ $force -eq 1 ]; then
    echo "Machine will reboot now | Graceful reboot"
    vboxmanage controlvm $vm_name acpipowerbutton
    ensure_vm_is_on
  else
    echo "Machine will reboot now | SSH reboot"
    ssh -p 2222 root@localhost "/sbin/shutdown -r now"
    sleep 3
  fi
  sleep 2
}

function time_method() {
  result=$(is_date_greater)
  if [ "$result" -eq 1 ]; then
    reboot_machine
    reboot_date=$(date -d "($reboot_date) +$minutes mins" +%s)
  fi
}

function memory_method() {
  if [ $vm_total_rss -gt $memory_maximum ]; then
    echo "RSS exceeded"
    reboot_machine
  fi

  if [ $vm_total_vsz -gt $memory_maximum ]; then
    echo "VSS exceeded"
    reboot_machine
  fi
}

function predict_method() {
  echo "predict method"
}

if [[ "$1" =~ ^((-{1,2})([Hh]$|[Hh][Ee][Ll][Pp])|)$ ]]; then
  echo "Iniciando testes de rejuvenescimento | Coleta de dados"
else
  while [[ $# -gt 0 ]]; do
    opt="$1"
    shift
    current_arg="$1"
    if [[ "$current_arg" =~ ^-{1,2}.* ]]; then
      echo "WARNING: You may have left an argument blank. Double-check your command."
      exit 1
    fi
    case "$opt" in
    "-t" | "--time")
      minutes=$1
      reboot_date=$(date -d "($start_date) +$1 mins" +%s)
      echo "Iniciando testes de rejuvenescimento | A MV irá reinciar a cada $minutes minutos"
      shift
      ;;
    "-m" | "--memory")
      memory_maximum=$(($1 * 1024))
      echo "Iniciando testes de rejuvenescimento | A MV irá reinciar quando o RSS ou VSS extrapolarem  $1 MBS"
      shift
      ;;
    "-p" | "--predicted")
      is_predicted="$1"
      shift
      ;;
    "-f" | "--force")
      force=1
      shift
      ;;
    "-n" | "--name")
      vm_name="$1"
      shift
      ;;
    *)
      echo "ERROR: Invalid option: \"$opt\"" >&2
      print_usage
      exit 1
      ;;
    esac
  done
fi

#if [[ "$APPLE" == "" || "$BANANA" == "" ]]; then
#    echo "ERROR: Options -a and -b require arguments." >&2
#    exit 1
#fi

function headers() {
  mkdir -p logs
  echo "cpu;mem;vmrss;vsz;threads;swap;date_time" >logs/monitoramento-VBoxSVC.csv
  echo "cpu;mem;vmrss;vsz;threads;swap;date_time" >logs/monitoramento-VBoxHeadless.csv
  echo "cpu;mem;vmrss;vsz;threads;swap;date_time" >logs/monitoramento-VBoxXPCOMIPCD.csv
  echo "usr;nice;sys;iowait;soft;date_time" >logs/monitoramento-cpu.csv
  echo "used;date_time" >logs/monitoramento-disco.csv
  echo "used;cached;buffer;swap-free;date_time" >logs/monitoramento-mem.csv
  echo "num_zumbis;date_time" >logs/monitoramento-zumbis.csv
  echo "server_down; period; seconds" >logs/server_status.csv
  echo "0" > rebooting.txt
}

function verify_server_status() {
  if [ "$server_status" -eq "-1" ]; then
    code=$(curl -w "%{http_code}" -o /dev/null -s "http://localhost:8080")
    if [ "$code" -eq 200 ]; then
      date_time=$(date +%d-%m-%Y-%H:%M:%S)
      server_down_end=$(date +%s)
      result="$((server_down_end - server_down_start))"
      server_status=0
      server_down_start=0
      sleep_time=10
      echo "$date_time; $reboot_count; $result" >>logs/server_status.csv
      echo "Server is up again"
    fi
  fi
}

vboxmanage startvm "$vm_name" --type headless

headers

./workload.sh "$vm_name" disks/disk 50 &

stap -o fragmentacao.txt memory_fragmentation/fragmentacao2b.stp &
stap -o fragmentacao-reducao.txt memory_fragmentation/probe_fragmentacao-com-reducao.stp &

processos/monitoramento-VBoxXPCOMIPCD.sh &
processos/monitoramento-VBoxHeadless.sh &
processos/monitoramento-VBoxSVC.sh &

./machine-resources.sh &

while true; do
  :

  date_time=$(date +%d-%m-%Y-%H:%M:%S)

  if [ "$memory_maximum" -gt 0 ]; then
    memory_method
  fi
  if [ "$is_predicted" -gt 0 ]; then
    predict_method
  fi
  if [ "$reboot_date" -gt 0 ]; then
    time_method
  fi

  verify_server_status

  sleep $sleep_time
done
